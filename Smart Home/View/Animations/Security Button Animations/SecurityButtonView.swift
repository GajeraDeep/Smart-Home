//
// SecurityButtonView.swift
// Generated by Core Animator version 1.5.2 on 05/02/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _SecurityButtonPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class SecurityButtonView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 225, height: 225))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:225, height:225)
		__scaling__.center = CGPoint(x:112.5, y:112.5)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let background__root = _SecurityButtonPassthroughView()
		let background__xScale = _SecurityButtonPassthroughView()
		let background__yScale = _SecurityButtonPassthroughView()
		let background = UIImageView()
		let imgBackground = UIImage(named:"Background.png", in: bundle, compatibleWith: nil)
		if imgBackground == nil {
			print("** Warning: Could not create image from 'Background.png'")
		}
		background.image = imgBackground
		background.contentMode = .center
		background.bounds = CGRect(x:0, y:0, width:334.0, height:334.0)
		background__root.layer.position = CGPoint(x:112.670, y:112.248)
		background__xScale.transform = CGAffineTransform(scaleX: 0.39, y: 1.00)
		background__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.39)
		background__root.transform = CGAffineTransform(rotationAngle: 0.000)
		background__root.addSubview(background__xScale)
		background__xScale.addSubview(background__yScale)
		background__yScale.addSubview(background)
		__scaling__.addSubview(background__root)
		viewsByName["Background__root"] = background__root
		viewsByName["Background__xScale"] = background__xScale
		viewsByName["Background__yScale"] = background__yScale
		viewsByName["Background"] = background

		let nInnerBorder__root = _SecurityButtonPassthroughView()
		let nInnerBorder__xScale = _SecurityButtonPassthroughView()
		let nInnerBorder__yScale = _SecurityButtonPassthroughView()
		let nInnerBorder = UIImageView()
		let imgNInnerBorder = UIImage(named:"N Inner Border.png", in: bundle, compatibleWith: nil)
		if imgNInnerBorder == nil {
			print("** Warning: Could not create image from 'N Inner Border.png'")
		}
		nInnerBorder.image = imgNInnerBorder
		nInnerBorder.contentMode = .center
		nInnerBorder.bounds = CGRect(x:0, y:0, width:308.0, height:308.0)
		nInnerBorder__root.layer.position = CGPoint(x:112.630, y:112.208)
		nInnerBorder__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		nInnerBorder__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		nInnerBorder__root.transform = CGAffineTransform(rotationAngle: 0.000)
		nInnerBorder__root.addSubview(nInnerBorder__xScale)
		nInnerBorder__xScale.addSubview(nInnerBorder__yScale)
		nInnerBorder__yScale.addSubview(nInnerBorder)
		__scaling__.addSubview(nInnerBorder__root)
		viewsByName["N Inner Border__root"] = nInnerBorder__root
		viewsByName["N Inner Border__xScale"] = nInnerBorder__xScale
		viewsByName["N Inner Border__yScale"] = nInnerBorder__yScale
		viewsByName["N Inner Border"] = nInnerBorder

		let nOuterBorder__root = _SecurityButtonPassthroughView()
		let nOuterBorder__xScale = _SecurityButtonPassthroughView()
		let nOuterBorder__yScale = _SecurityButtonPassthroughView()
		let nOuterBorder = UIImageView()
		let imgNOuterBorder = UIImage(named:"N Outer Border.png", in: bundle, compatibleWith: nil)
		if imgNOuterBorder == nil {
			print("** Warning: Could not create image from 'N Outer Border.png'")
		}
		nOuterBorder.image = imgNOuterBorder
		nOuterBorder.contentMode = .center
		nOuterBorder.bounds = CGRect(x:0, y:0, width:362.0, height:362.0)
		nOuterBorder__root.layer.position = CGPoint(x:112.630, y:112.208)
		nOuterBorder__root.alpha = 0.00
		nOuterBorder__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		nOuterBorder__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		nOuterBorder__root.transform = CGAffineTransform(rotationAngle: 0.000)
		nOuterBorder__root.addSubview(nOuterBorder__xScale)
		nOuterBorder__xScale.addSubview(nOuterBorder__yScale)
		nOuterBorder__yScale.addSubview(nOuterBorder)
		__scaling__.addSubview(nOuterBorder__root)
		viewsByName["N Outer Border__root"] = nOuterBorder__root
		viewsByName["N Outer Border__xScale"] = nOuterBorder__xScale
		viewsByName["N Outer Border__yScale"] = nOuterBorder__yScale
		viewsByName["N Outer Border"] = nOuterBorder

		let alertInnerBorder__root = _SecurityButtonPassthroughView()
		let alertInnerBorder__xScale = _SecurityButtonPassthroughView()
		let alertInnerBorder__yScale = _SecurityButtonPassthroughView()
		let alertInnerBorder = UIImageView()
		let imgAlertInnerBorder = UIImage(named:"Alert Inner Border.png", in: bundle, compatibleWith: nil)
		if imgAlertInnerBorder == nil {
			print("** Warning: Could not create image from 'Alert Inner Border.png'")
		}
		alertInnerBorder.image = imgAlertInnerBorder
		alertInnerBorder.contentMode = .center
		alertInnerBorder.bounds = CGRect(x:0, y:0, width:308.0, height:308.0)
		alertInnerBorder__root.layer.position = CGPoint(x:112.630, y:112.208)
		alertInnerBorder__root.alpha = 0.00
		alertInnerBorder__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		alertInnerBorder__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		alertInnerBorder__root.transform = CGAffineTransform(rotationAngle: 0.000)
		alertInnerBorder__root.addSubview(alertInnerBorder__xScale)
		alertInnerBorder__xScale.addSubview(alertInnerBorder__yScale)
		alertInnerBorder__yScale.addSubview(alertInnerBorder)
		__scaling__.addSubview(alertInnerBorder__root)
		viewsByName["Alert Inner Border__root"] = alertInnerBorder__root
		viewsByName["Alert Inner Border__xScale"] = alertInnerBorder__xScale
		viewsByName["Alert Inner Border__yScale"] = alertInnerBorder__yScale
		viewsByName["Alert Inner Border"] = alertInnerBorder

		let alertOuterBorder__root = _SecurityButtonPassthroughView()
		let alertOuterBorder__xScale = _SecurityButtonPassthroughView()
		let alertOuterBorder__yScale = _SecurityButtonPassthroughView()
		let alertOuterBorder = UIImageView()
		let imgAlertOuterBorder = UIImage(named:"Alert Outer Border.png", in: bundle, compatibleWith: nil)
		if imgAlertOuterBorder == nil {
			print("** Warning: Could not create image from 'Alert Outer Border.png'")
		}
		alertOuterBorder.image = imgAlertOuterBorder
		alertOuterBorder.contentMode = .center
		alertOuterBorder.bounds = CGRect(x:0, y:0, width:364.0, height:364.0)
		alertOuterBorder__root.layer.position = CGPoint(x:112.630, y:112.208)
		alertOuterBorder__root.alpha = 0.00
		alertOuterBorder__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		alertOuterBorder__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		alertOuterBorder__root.transform = CGAffineTransform(rotationAngle: 0.000)
		alertOuterBorder__root.addSubview(alertOuterBorder__xScale)
		alertOuterBorder__xScale.addSubview(alertOuterBorder__yScale)
		alertOuterBorder__yScale.addSubview(alertOuterBorder)
		__scaling__.addSubview(alertOuterBorder__root)
		viewsByName["Alert Outer Border__root"] = alertOuterBorder__root
		viewsByName["Alert Outer Border__xScale"] = alertOuterBorder__xScale
		viewsByName["Alert Outer Border__yScale"] = alertOuterBorder__yScale
		viewsByName["Alert Outer Border"] = alertOuterBorder

		let alertShield__root = _SecurityButtonPassthroughView()
		let alertShield__xScale = _SecurityButtonPassthroughView()
		let alertShield__yScale = _SecurityButtonPassthroughView()
		let alertShield = UIImageView()
		let imgAlertShield = UIImage(named:"Alert Shield.png", in: bundle, compatibleWith: nil)
		if imgAlertShield == nil {
			print("** Warning: Could not create image from 'Alert Shield.png'")
		}
		alertShield.image = imgAlertShield
		alertShield.contentMode = .center
		alertShield.bounds = CGRect(x:0, y:0, width:88.0, height:112.0)
		alertShield__root.layer.position = CGPoint(x:112.630, y:112.208)
		alertShield__root.alpha = 0.00
		alertShield__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		alertShield__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		alertShield__root.transform = CGAffineTransform(rotationAngle: 0.000)
		alertShield__root.addSubview(alertShield__xScale)
		alertShield__xScale.addSubview(alertShield__yScale)
		alertShield__yScale.addSubview(alertShield)
		__scaling__.addSubview(alertShield__root)
		viewsByName["Alert Shield__root"] = alertShield__root
		viewsByName["Alert Shield__xScale"] = alertShield__xScale
		viewsByName["Alert Shield__yScale"] = alertShield__yScale
		viewsByName["Alert Shield"] = alertShield

		let lock__root = _SecurityButtonPassthroughView()
		let lock__xScale = _SecurityButtonPassthroughView()
		let lock__yScale = _SecurityButtonPassthroughView()
		let lock = UIImageView()
		let imgLock = UIImage(named:"Lock.png", in: bundle, compatibleWith: nil)
		if imgLock == nil {
			print("** Warning: Could not create image from 'Lock.png'")
		}
		lock.image = imgLock
		lock.contentMode = .center
		lock.bounds = CGRect(x:0, y:0, width:78.0, height:124.0)
		lock__root.layer.position = CGPoint(x:112.630, y:112.208)
		lock__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		lock__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		lock__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lock__root.addSubview(lock__xScale)
		lock__xScale.addSubview(lock__yScale)
		lock__yScale.addSubview(lock)
		__scaling__.addSubview(lock__root)
		viewsByName["Lock__root"] = lock__root
		viewsByName["Lock__xScale"] = lock__xScale
		viewsByName["Lock__yScale"] = lock__yScale
		viewsByName["Lock"] = lock

		let shield__root = _SecurityButtonPassthroughView()
		let shield__xScale = _SecurityButtonPassthroughView()
		let shield__yScale = _SecurityButtonPassthroughView()
		let shield = UIImageView()
		let imgShield = UIImage(named:"Shield.png", in: bundle, compatibleWith: nil)
		if imgShield == nil {
			print("** Warning: Could not create image from 'Shield.png'")
		}
		shield.image = imgShield
		shield.contentMode = .center
		shield.bounds = CGRect(x:0, y:0, width:88.0, height:112.0)
		shield__root.layer.position = CGPoint(x:112.630, y:112.208)
		shield__root.alpha = 0.00
		shield__xScale.transform = CGAffineTransform(scaleX: 0.51, y: 1.00)
		shield__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.51)
		shield__root.transform = CGAffineTransform(rotationAngle: 0.000)
		shield__root.addSubview(shield__xScale)
		shield__xScale.addSubview(shield__yScale)
		shield__yScale.addSubview(shield)
		__scaling__.addSubview(shield__root)
		viewsByName["Shield__root"] = shield__root
		viewsByName["Shield__xScale"] = shield__xScale
		viewsByName["Shield__yScale"] = shield__yScale
		viewsByName["Shield"] = shield

		self.viewsByName = viewsByName
	}

	// - MARK: breachDetected

	func addBreachDetectedAnimation() {
		addBreachDetectedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addBreachDetectedAnimation(completion: ((Bool) -> Void)?) {
		addBreachDetectedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addBreachDetectedAnimation(removedOnCompletion: Bool) {
		addBreachDetectedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addBreachDetectedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBreachDetectedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addBreachDetectedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.625
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "BreachDetected")
			self.animationCompletions[layer.animation(forKey: "BreachDetected")!] = complete
		}

		let nInnerBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nInnerBorderImageContentsAnimation.duration = 0.625
		nInnerBorderImageContentsAnimation.values = [UIImage(named: "N Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nInnerBorderImageContentsAnimation.keyTimes = [0.000, 0.280, 1.000] as [NSNumber]
		nInnerBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		nInnerBorderImageContentsAnimation.beginTime = beginTime
		nInnerBorderImageContentsAnimation.fillMode = fillMode
		nInnerBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border"]?.layer.add(nInnerBorderImageContentsAnimation, forKey:"breachDetected_ImageContents")

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.625
		nInnerBorderScaleXAnimation.values = [0.510, 0.610, 0.450, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.400, 0.720, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"breachDetected_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.625
		nInnerBorderScaleYAnimation.values = [0.510, 0.610, 0.450, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.400, 0.720, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"breachDetected_ScaleY")

		let lockImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		lockImageContentsAnimation.duration = 0.625
		lockImageContentsAnimation.values = [UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		lockImageContentsAnimation.keyTimes = [0.000, 0.240, 1.000] as [NSNumber]
		lockImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		lockImageContentsAnimation.beginTime = beginTime
		lockImageContentsAnimation.fillMode = fillMode
		lockImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Lock"]?.layer.add(lockImageContentsAnimation, forKey:"breachDetected_ImageContents")

		let backgroundOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		backgroundOpacityAnimation.duration = 0.625
		backgroundOpacityAnimation.values = [1.000, 1.000] as [Float]
		backgroundOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		backgroundOpacityAnimation.timingFunctions = [linearTiming]
		backgroundOpacityAnimation.beginTime = beginTime
		backgroundOpacityAnimation.fillMode = fillMode
		backgroundOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__root"]?.layer.add(backgroundOpacityAnimation, forKey:"breachDetected_Opacity")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.625
		backgroundScaleXAnimation.values = [0.510, 0.600, 0.450, 0.510] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.238, 0.760, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"breachDetected_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.625
		backgroundScaleYAnimation.values = [0.510, 0.600, 0.450, 0.510] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.238, 0.760, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"breachDetected_ScaleY")

		let nOuterBorderOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		nOuterBorderOpacityAnimation.duration = 0.625
		nOuterBorderOpacityAnimation.values = [1.000, 1.000] as [Float]
		nOuterBorderOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		nOuterBorderOpacityAnimation.timingFunctions = [linearTiming]
		nOuterBorderOpacityAnimation.beginTime = beginTime
		nOuterBorderOpacityAnimation.fillMode = fillMode
		nOuterBorderOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__root"]?.layer.add(nOuterBorderOpacityAnimation, forKey:"breachDetected_Opacity")

		let nOuterBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nOuterBorderImageContentsAnimation.duration = 0.625
		nOuterBorderImageContentsAnimation.values = [UIImage(named: "N Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nOuterBorderImageContentsAnimation.keyTimes = [0.000, 0.280, 1.000] as [NSNumber]
		nOuterBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		nOuterBorderImageContentsAnimation.beginTime = beginTime
		nOuterBorderImageContentsAnimation.fillMode = fillMode
		nOuterBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border"]?.layer.add(nOuterBorderImageContentsAnimation, forKey:"breachDetected_ImageContents")

		let nOuterBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nOuterBorderScaleXAnimation.duration = 0.625
		nOuterBorderScaleXAnimation.values = [0.510, 0.555, 0.450, 0.500] as [Float]
		nOuterBorderScaleXAnimation.keyTimes = [0.000, 0.240, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderScaleXAnimation.beginTime = beginTime
		nOuterBorderScaleXAnimation.fillMode = fillMode
		nOuterBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__xScale"]?.layer.add(nOuterBorderScaleXAnimation, forKey:"breachDetected_ScaleX")

		let nOuterBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nOuterBorderScaleYAnimation.duration = 0.625
		nOuterBorderScaleYAnimation.values = [0.510, 0.555, 0.450, 0.500] as [Float]
		nOuterBorderScaleYAnimation.keyTimes = [0.000, 0.240, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderScaleYAnimation.beginTime = beginTime
		nOuterBorderScaleYAnimation.fillMode = fillMode
		nOuterBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__yScale"]?.layer.add(nOuterBorderScaleYAnimation, forKey:"breachDetected_ScaleY")
	}

	func removeBreachDetectedAnimation() {
		self.layer.removeAnimation(forKey: "BreachDetected")
		self.viewsByName["N Inner Border"]?.layer.removeAnimation(forKey: "breachDetected_ImageContents")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleY")
		self.viewsByName["Lock"]?.layer.removeAnimation(forKey: "breachDetected_ImageContents")
		self.viewsByName["Background__root"]?.layer.removeAnimation(forKey: "breachDetected_Opacity")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleY")
		self.viewsByName["N Outer Border__root"]?.layer.removeAnimation(forKey: "breachDetected_Opacity")
		self.viewsByName["N Outer Border"]?.layer.removeAnimation(forKey: "breachDetected_ImageContents")
		self.viewsByName["N Outer Border__xScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleX")
		self.viewsByName["N Outer Border__yScale"]?.layer.removeAnimation(forKey: "breachDetected_ScaleY")
	}

	// - MARK: disableBreach

	func addDisableBreachAnimation() {
		addDisableBreachAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDisableBreachAnimation(completion: ((Bool) -> Void)?) {
		addDisableBreachAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDisableBreachAnimation(removedOnCompletion: Bool) {
		addDisableBreachAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDisableBreachAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDisableBreachAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDisableBreachAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.625
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "DisableBreach")
			self.animationCompletions[layer.animation(forKey: "DisableBreach")!] = complete
		}

		let nInnerBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nInnerBorderImageContentsAnimation.duration = 0.625
		nInnerBorderImageContentsAnimation.values = [UIImage(named: "Alert Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nInnerBorderImageContentsAnimation.keyTimes = [0.000, 0.080, 0.360, 1.000] as [NSNumber]
		nInnerBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nInnerBorderImageContentsAnimation.beginTime = beginTime
		nInnerBorderImageContentsAnimation.fillMode = fillMode
		nInnerBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border"]?.layer.add(nInnerBorderImageContentsAnimation, forKey:"disableBreach_ImageContents")

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.625
		nInnerBorderScaleXAnimation.values = [0.510, 0.450, 0.610, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.280, 0.600, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"disableBreach_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.625
		nInnerBorderScaleYAnimation.values = [0.510, 0.450, 0.610, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.280, 0.600, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"disableBreach_ScaleY")

		let lockImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		lockImageContentsAnimation.duration = 0.625
		lockImageContentsAnimation.values = [UIImage(named: "Alert Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		lockImageContentsAnimation.keyTimes = [0.000, 0.120, 0.360, 1.000] as [NSNumber]
		lockImageContentsAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		lockImageContentsAnimation.beginTime = beginTime
		lockImageContentsAnimation.fillMode = fillMode
		lockImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Lock"]?.layer.add(lockImageContentsAnimation, forKey:"disableBreach_ImageContents")

		let backgroundOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		backgroundOpacityAnimation.duration = 0.625
		backgroundOpacityAnimation.values = [1.000, 1.000] as [Float]
		backgroundOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		backgroundOpacityAnimation.timingFunctions = [linearTiming]
		backgroundOpacityAnimation.beginTime = beginTime
		backgroundOpacityAnimation.fillMode = fillMode
		backgroundOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__root"]?.layer.add(backgroundOpacityAnimation, forKey:"disableBreach_Opacity")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.625
		backgroundScaleXAnimation.values = [0.510, 0.450, 0.600, 0.510] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.240, 0.762, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"disableBreach_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.625
		backgroundScaleYAnimation.values = [0.510, 0.450, 0.600, 0.510] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.240, 0.762, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"disableBreach_ScaleY")

		let nOuterBorderOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		nOuterBorderOpacityAnimation.duration = 0.625
		nOuterBorderOpacityAnimation.values = [1.000, 1.000] as [Float]
		nOuterBorderOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		nOuterBorderOpacityAnimation.timingFunctions = [linearTiming]
		nOuterBorderOpacityAnimation.beginTime = beginTime
		nOuterBorderOpacityAnimation.fillMode = fillMode
		nOuterBorderOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__root"]?.layer.add(nOuterBorderOpacityAnimation, forKey:"disableBreach_Opacity")

		let nOuterBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nOuterBorderImageContentsAnimation.duration = 0.625
		nOuterBorderImageContentsAnimation.values = [UIImage(named: "Alert Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Alert Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nOuterBorderImageContentsAnimation.keyTimes = [0.000, 0.080, 0.360, 1.000] as [NSNumber]
		nOuterBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderImageContentsAnimation.beginTime = beginTime
		nOuterBorderImageContentsAnimation.fillMode = fillMode
		nOuterBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border"]?.layer.add(nOuterBorderImageContentsAnimation, forKey:"disableBreach_ImageContents")

		let nOuterBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nOuterBorderScaleXAnimation.duration = 0.625
		nOuterBorderScaleXAnimation.values = [0.500, 0.450, 0.555, 0.510] as [Float]
		nOuterBorderScaleXAnimation.keyTimes = [0.000, 0.240, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderScaleXAnimation.beginTime = beginTime
		nOuterBorderScaleXAnimation.fillMode = fillMode
		nOuterBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__xScale"]?.layer.add(nOuterBorderScaleXAnimation, forKey:"disableBreach_ScaleX")

		let nOuterBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nOuterBorderScaleYAnimation.duration = 0.625
		nOuterBorderScaleYAnimation.values = [0.500, 0.450, 0.555, 0.510] as [Float]
		nOuterBorderScaleYAnimation.keyTimes = [0.000, 0.240, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderScaleYAnimation.beginTime = beginTime
		nOuterBorderScaleYAnimation.fillMode = fillMode
		nOuterBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__yScale"]?.layer.add(nOuterBorderScaleYAnimation, forKey:"disableBreach_ScaleY")
	}

	func removeDisableBreachAnimation() {
		self.layer.removeAnimation(forKey: "DisableBreach")
		self.viewsByName["N Inner Border"]?.layer.removeAnimation(forKey: "disableBreach_ImageContents")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleY")
		self.viewsByName["Lock"]?.layer.removeAnimation(forKey: "disableBreach_ImageContents")
		self.viewsByName["Background__root"]?.layer.removeAnimation(forKey: "disableBreach_Opacity")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleY")
		self.viewsByName["N Outer Border__root"]?.layer.removeAnimation(forKey: "disableBreach_Opacity")
		self.viewsByName["N Outer Border"]?.layer.removeAnimation(forKey: "disableBreach_ImageContents")
		self.viewsByName["N Outer Border__xScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleX")
		self.viewsByName["N Outer Border__yScale"]?.layer.removeAnimation(forKey: "disableBreach_ScaleY")
	}

	// - MARK: dissableSecurity

	func addDissableSecurityAnimation() {
		addDissableSecurityAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDissableSecurityAnimation(completion: ((Bool) -> Void)?) {
		addDissableSecurityAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDissableSecurityAnimation(removedOnCompletion: Bool) {
		addDissableSecurityAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDissableSecurityAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDissableSecurityAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDissableSecurityAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.625
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "DissableSecurity")
			self.animationCompletions[layer.animation(forKey: "DissableSecurity")!] = complete
		}

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.625
		nInnerBorderScaleXAnimation.values = [0.510, 0.610, 0.510, 0.410, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.200, 0.360, 0.640, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"dissableSecurity_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.625
		nInnerBorderScaleYAnimation.values = [0.510, 0.610, 0.510, 0.410, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.200, 0.360, 0.640, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"dissableSecurity_ScaleY")

		let lockImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		lockImageContentsAnimation.duration = 0.625
		lockImageContentsAnimation.values = [UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Lock.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Lock.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		lockImageContentsAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		lockImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		lockImageContentsAnimation.beginTime = beginTime
		lockImageContentsAnimation.fillMode = fillMode
		lockImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Lock"]?.layer.add(lockImageContentsAnimation, forKey:"dissableSecurity_ImageContents")

		let backgroundOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		backgroundOpacityAnimation.duration = 0.625
		backgroundOpacityAnimation.values = [1.000, 1.000] as [Float]
		backgroundOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		backgroundOpacityAnimation.timingFunctions = [linearTiming]
		backgroundOpacityAnimation.beginTime = beginTime
		backgroundOpacityAnimation.fillMode = fillMode
		backgroundOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__root"]?.layer.add(backgroundOpacityAnimation, forKey:"dissableSecurity_Opacity")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.625
		backgroundScaleXAnimation.values = [0.510, 0.554, 0.435, 0.335, 0.385] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.200, 0.360, 0.680, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"dissableSecurity_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.625
		backgroundScaleYAnimation.values = [0.510, 0.554, 0.435, 0.335, 0.385] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.200, 0.360, 0.680, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"dissableSecurity_ScaleY")

		let nOuterBorderOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		nOuterBorderOpacityAnimation.duration = 0.625
		nOuterBorderOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		nOuterBorderOpacityAnimation.keyTimes = [0.000, 0.240, 0.680, 1.000] as [NSNumber]
		nOuterBorderOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderOpacityAnimation.beginTime = beginTime
		nOuterBorderOpacityAnimation.fillMode = fillMode
		nOuterBorderOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__root"]?.layer.add(nOuterBorderOpacityAnimation, forKey:"dissableSecurity_Opacity")

		let nOuterBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nOuterBorderScaleXAnimation.duration = 0.625
		nOuterBorderScaleXAnimation.values = [0.510, 0.555, 0.360, 0.360, 0.510, 0.510, 0.510] as [Float]
		nOuterBorderScaleXAnimation.keyTimes = [0.000, 0.240, 0.680, 0.681, 0.682, 0.999, 1.000] as [NSNumber]
		nOuterBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		nOuterBorderScaleXAnimation.beginTime = beginTime
		nOuterBorderScaleXAnimation.fillMode = fillMode
		nOuterBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__xScale"]?.layer.add(nOuterBorderScaleXAnimation, forKey:"dissableSecurity_ScaleX")

		let nOuterBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nOuterBorderScaleYAnimation.duration = 0.625
		nOuterBorderScaleYAnimation.values = [0.510, 0.555, 0.360, 0.360, 0.510, 0.510, 0.510] as [Float]
		nOuterBorderScaleYAnimation.keyTimes = [0.000, 0.240, 0.680, 0.681, 0.682, 0.999, 1.000] as [NSNumber]
		nOuterBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		nOuterBorderScaleYAnimation.beginTime = beginTime
		nOuterBorderScaleYAnimation.fillMode = fillMode
		nOuterBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__yScale"]?.layer.add(nOuterBorderScaleYAnimation, forKey:"dissableSecurity_ScaleY")
	}

	func removeDissableSecurityAnimation() {
		self.layer.removeAnimation(forKey: "DissableSecurity")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleY")
		self.viewsByName["Lock"]?.layer.removeAnimation(forKey: "dissableSecurity_ImageContents")
		self.viewsByName["Background__root"]?.layer.removeAnimation(forKey: "dissableSecurity_Opacity")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleY")
		self.viewsByName["N Outer Border__root"]?.layer.removeAnimation(forKey: "dissableSecurity_Opacity")
		self.viewsByName["N Outer Border__xScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleX")
		self.viewsByName["N Outer Border__yScale"]?.layer.removeAnimation(forKey: "dissableSecurity_ScaleY")
	}

	// - MARK: dissableSecurityWithBreach

	func addDissableSecurityWithBreachAnimation() {
		addDissableSecurityWithBreachAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDissableSecurityWithBreachAnimation(completion: ((Bool) -> Void)?) {
		addDissableSecurityWithBreachAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDissableSecurityWithBreachAnimation(removedOnCompletion: Bool) {
		addDissableSecurityWithBreachAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDissableSecurityWithBreachAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDissableSecurityWithBreachAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDissableSecurityWithBreachAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.625
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "DissableSecurityWithBreach")
			self.animationCompletions[layer.animation(forKey: "DissableSecurityWithBreach")!] = complete
		}

		let nInnerBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nInnerBorderImageContentsAnimation.duration = 0.625
		nInnerBorderImageContentsAnimation.values = [UIImage(named: "Alert Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Inner Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nInnerBorderImageContentsAnimation.keyTimes = [0.000, 0.320, 1.000] as [NSNumber]
		nInnerBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		nInnerBorderImageContentsAnimation.beginTime = beginTime
		nInnerBorderImageContentsAnimation.fillMode = fillMode
		nInnerBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border"]?.layer.add(nInnerBorderImageContentsAnimation, forKey:"dissableSecurityWithBreach_ImageContents")

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.625
		nInnerBorderScaleXAnimation.values = [0.510, 0.610, 0.510, 0.410, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.200, 0.360, 0.640, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"dissableSecurityWithBreach_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.625
		nInnerBorderScaleYAnimation.values = [0.510, 0.610, 0.510, 0.410, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.200, 0.360, 0.640, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"dissableSecurityWithBreach_ScaleY")

		let lockImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		lockImageContentsAnimation.duration = 0.625
		lockImageContentsAnimation.values = [UIImage(named: "Alert Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Lock.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Lock.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		lockImageContentsAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		lockImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		lockImageContentsAnimation.beginTime = beginTime
		lockImageContentsAnimation.fillMode = fillMode
		lockImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Lock"]?.layer.add(lockImageContentsAnimation, forKey:"dissableSecurityWithBreach_ImageContents")

		let backgroundOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		backgroundOpacityAnimation.duration = 0.625
		backgroundOpacityAnimation.values = [1.000, 1.000] as [Float]
		backgroundOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		backgroundOpacityAnimation.timingFunctions = [linearTiming]
		backgroundOpacityAnimation.beginTime = beginTime
		backgroundOpacityAnimation.fillMode = fillMode
		backgroundOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__root"]?.layer.add(backgroundOpacityAnimation, forKey:"dissableSecurityWithBreach_Opacity")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.625
		backgroundScaleXAnimation.values = [0.510, 0.554, 0.435, 0.335, 0.385] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.200, 0.360, 0.680, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"dissableSecurityWithBreach_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.625
		backgroundScaleYAnimation.values = [0.510, 0.554, 0.435, 0.335, 0.385] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.200, 0.360, 0.680, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"dissableSecurityWithBreach_ScaleY")

		let nOuterBorderOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		nOuterBorderOpacityAnimation.duration = 0.625
		nOuterBorderOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		nOuterBorderOpacityAnimation.keyTimes = [0.000, 0.240, 0.680, 1.000] as [NSNumber]
		nOuterBorderOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderOpacityAnimation.beginTime = beginTime
		nOuterBorderOpacityAnimation.fillMode = fillMode
		nOuterBorderOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__root"]?.layer.add(nOuterBorderOpacityAnimation, forKey:"dissableSecurityWithBreach_Opacity")

		let nOuterBorderImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		nOuterBorderImageContentsAnimation.duration = 0.625
		nOuterBorderImageContentsAnimation.values = [UIImage(named: "Alert Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "N Outer Border.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		nOuterBorderImageContentsAnimation.keyTimes = [0.000, 0.480, 1.000] as [NSNumber]
		nOuterBorderImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		nOuterBorderImageContentsAnimation.beginTime = beginTime
		nOuterBorderImageContentsAnimation.fillMode = fillMode
		nOuterBorderImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border"]?.layer.add(nOuterBorderImageContentsAnimation, forKey:"dissableSecurityWithBreach_ImageContents")

		let nOuterBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nOuterBorderScaleXAnimation.duration = 0.625
		nOuterBorderScaleXAnimation.values = [0.510, 0.555, 0.360, 0.360, 0.510, 0.510, 0.510] as [Float]
		nOuterBorderScaleXAnimation.keyTimes = [0.000, 0.240, 0.680, 0.681, 0.682, 0.999, 1.000] as [NSNumber]
		nOuterBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		nOuterBorderScaleXAnimation.beginTime = beginTime
		nOuterBorderScaleXAnimation.fillMode = fillMode
		nOuterBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__xScale"]?.layer.add(nOuterBorderScaleXAnimation, forKey:"dissableSecurityWithBreach_ScaleX")

		let nOuterBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nOuterBorderScaleYAnimation.duration = 0.625
		nOuterBorderScaleYAnimation.values = [0.510, 0.555, 0.360, 0.360, 0.510, 0.510, 0.510] as [Float]
		nOuterBorderScaleYAnimation.keyTimes = [0.000, 0.240, 0.680, 0.681, 0.682, 0.999, 1.000] as [NSNumber]
		nOuterBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		nOuterBorderScaleYAnimation.beginTime = beginTime
		nOuterBorderScaleYAnimation.fillMode = fillMode
		nOuterBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__yScale"]?.layer.add(nOuterBorderScaleYAnimation, forKey:"dissableSecurityWithBreach_ScaleY")
	}

	func removeDissableSecurityWithBreachAnimation() {
		self.layer.removeAnimation(forKey: "DissableSecurityWithBreach")
		self.viewsByName["N Inner Border"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ImageContents")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleY")
		self.viewsByName["Lock"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ImageContents")
		self.viewsByName["Background__root"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_Opacity")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleY")
		self.viewsByName["N Outer Border__root"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_Opacity")
		self.viewsByName["N Outer Border"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ImageContents")
		self.viewsByName["N Outer Border__xScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleX")
		self.viewsByName["N Outer Border__yScale"]?.layer.removeAnimation(forKey: "dissableSecurityWithBreach_ScaleY")
	}

	// - MARK: enableSecurity

	func addEnableSecurityAnimation() {
		addEnableSecurityAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addEnableSecurityAnimation(completion: ((Bool) -> Void)?) {
		addEnableSecurityAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addEnableSecurityAnimation(removedOnCompletion: Bool) {
		addEnableSecurityAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addEnableSecurityAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addEnableSecurityAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addEnableSecurityAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.625
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "EnableSecurity")
			self.animationCompletions[layer.animation(forKey: "EnableSecurity")!] = complete
		}

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.625
		nInnerBorderScaleXAnimation.values = [0.510, 0.410, 0.510, 0.610, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.360, 0.640, 0.800, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"enableSecurity_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.625
		nInnerBorderScaleYAnimation.values = [0.510, 0.410, 0.510, 0.610, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.360, 0.640, 0.800, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"enableSecurity_ScaleY")

		let lockImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		lockImageContentsAnimation.duration = 0.625
		lockImageContentsAnimation.values = [UIImage(named: "Lock.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Shield.png", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		lockImageContentsAnimation.keyTimes = [0.000, 0.440, 1.000] as [NSNumber]
		lockImageContentsAnimation.timingFunctions = [linearTiming, linearTiming]
		lockImageContentsAnimation.beginTime = beginTime
		lockImageContentsAnimation.fillMode = fillMode
		lockImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Lock"]?.layer.add(lockImageContentsAnimation, forKey:"enableSecurity_ImageContents")

		let backgroundOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		backgroundOpacityAnimation.duration = 0.625
		backgroundOpacityAnimation.values = [1.000, 1.000] as [Float]
		backgroundOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		backgroundOpacityAnimation.timingFunctions = [linearTiming]
		backgroundOpacityAnimation.beginTime = beginTime
		backgroundOpacityAnimation.fillMode = fillMode
		backgroundOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__root"]?.layer.add(backgroundOpacityAnimation, forKey:"enableSecurity_Opacity")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.625
		backgroundScaleXAnimation.values = [0.385, 0.335, 0.435, 0.554, 0.510] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.320, 0.640, 0.800, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"enableSecurity_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.625
		backgroundScaleYAnimation.values = [0.385, 0.335, 0.435, 0.554, 0.510] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.320, 0.640, 0.800, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"enableSecurity_ScaleY")

		let nOuterBorderOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		nOuterBorderOpacityAnimation.duration = 0.625
		nOuterBorderOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		nOuterBorderOpacityAnimation.keyTimes = [0.000, 0.320, 0.760, 1.000] as [NSNumber]
		nOuterBorderOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		nOuterBorderOpacityAnimation.beginTime = beginTime
		nOuterBorderOpacityAnimation.fillMode = fillMode
		nOuterBorderOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__root"]?.layer.add(nOuterBorderOpacityAnimation, forKey:"enableSecurity_Opacity")

		let nOuterBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nOuterBorderScaleXAnimation.duration = 0.625
		nOuterBorderScaleXAnimation.values = [0.510, 0.510, 0.360, 0.555, 0.510] as [Float]
		nOuterBorderScaleXAnimation.keyTimes = [0.000, 0.319, 0.320, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleXAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming]
		nOuterBorderScaleXAnimation.beginTime = beginTime
		nOuterBorderScaleXAnimation.fillMode = fillMode
		nOuterBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__xScale"]?.layer.add(nOuterBorderScaleXAnimation, forKey:"enableSecurity_ScaleX")

		let nOuterBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nOuterBorderScaleYAnimation.duration = 0.625
		nOuterBorderScaleYAnimation.values = [0.510, 0.510, 0.360, 0.555, 0.510] as [Float]
		nOuterBorderScaleYAnimation.keyTimes = [0.000, 0.319, 0.320, 0.760, 1.000] as [NSNumber]
		nOuterBorderScaleYAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming]
		nOuterBorderScaleYAnimation.beginTime = beginTime
		nOuterBorderScaleYAnimation.fillMode = fillMode
		nOuterBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Outer Border__yScale"]?.layer.add(nOuterBorderScaleYAnimation, forKey:"enableSecurity_ScaleY")
	}

	func removeEnableSecurityAnimation() {
		self.layer.removeAnimation(forKey: "EnableSecurity")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleY")
		self.viewsByName["Lock"]?.layer.removeAnimation(forKey: "enableSecurity_ImageContents")
		self.viewsByName["Background__root"]?.layer.removeAnimation(forKey: "enableSecurity_Opacity")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleY")
		self.viewsByName["N Outer Border__root"]?.layer.removeAnimation(forKey: "enableSecurity_Opacity")
		self.viewsByName["N Outer Border__xScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleX")
		self.viewsByName["N Outer Border__yScale"]?.layer.removeAnimation(forKey: "enableSecurity_ScaleY")
	}

	// - MARK: userPresent

	func addUserPresentAnimation() {
		addUserPresentAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUserPresentAnimation(completion: ((Bool) -> Void)?) {
		addUserPresentAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUserPresentAnimation(removedOnCompletion: Bool) {
		addUserPresentAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUserPresentAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUserPresentAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUserPresentAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "UserPresent")
			self.animationCompletions[layer.animation(forKey: "UserPresent")!] = complete
		}

		let nInnerBorderScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		nInnerBorderScaleXAnimation.duration = 0.675
		nInnerBorderScaleXAnimation.values = [0.510, 0.410, 0.510, 0.610, 0.470, 0.510] as [Float]
		nInnerBorderScaleXAnimation.keyTimes = [0.000, 0.333, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		nInnerBorderScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleXAnimation.beginTime = beginTime
		nInnerBorderScaleXAnimation.fillMode = fillMode
		nInnerBorderScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__xScale"]?.layer.add(nInnerBorderScaleXAnimation, forKey:"userPresent_ScaleX")

		let nInnerBorderScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		nInnerBorderScaleYAnimation.duration = 0.675
		nInnerBorderScaleYAnimation.values = [0.510, 0.410, 0.510, 0.610, 0.470, 0.510] as [Float]
		nInnerBorderScaleYAnimation.keyTimes = [0.000, 0.333, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		nInnerBorderScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		nInnerBorderScaleYAnimation.beginTime = beginTime
		nInnerBorderScaleYAnimation.fillMode = fillMode
		nInnerBorderScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N Inner Border__yScale"]?.layer.add(nInnerBorderScaleYAnimation, forKey:"userPresent_ScaleY")

		let backgroundScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		backgroundScaleXAnimation.duration = 0.675
		backgroundScaleXAnimation.values = [0.385, 0.335, 0.415, 0.484, 0.390, 0.390] as [Float]
		backgroundScaleXAnimation.keyTimes = [0.000, 0.259, 0.519, 0.667, 0.852, 1.000] as [NSNumber]
		backgroundScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleXAnimation.beginTime = beginTime
		backgroundScaleXAnimation.fillMode = fillMode
		backgroundScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__xScale"]?.layer.add(backgroundScaleXAnimation, forKey:"userPresent_ScaleX")

		let backgroundScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		backgroundScaleYAnimation.duration = 0.675
		backgroundScaleYAnimation.values = [0.385, 0.335, 0.415, 0.484, 0.390, 0.390] as [Float]
		backgroundScaleYAnimation.keyTimes = [0.000, 0.259, 0.519, 0.667, 0.852, 1.000] as [NSNumber]
		backgroundScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		backgroundScaleYAnimation.beginTime = beginTime
		backgroundScaleYAnimation.fillMode = fillMode
		backgroundScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Background__yScale"]?.layer.add(backgroundScaleYAnimation, forKey:"userPresent_ScaleY")
	}

	func removeUserPresentAnimation() {
		self.layer.removeAnimation(forKey: "UserPresent")
		self.viewsByName["N Inner Border__xScale"]?.layer.removeAnimation(forKey: "userPresent_ScaleX")
		self.viewsByName["N Inner Border__yScale"]?.layer.removeAnimation(forKey: "userPresent_ScaleY")
		self.viewsByName["Background__xScale"]?.layer.removeAnimation(forKey: "userPresent_ScaleX")
		self.viewsByName["Background__yScale"]?.layer.removeAnimation(forKey: "userPresent_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "BreachDetected")
		self.layer.removeAnimation(forKey: "EnableSecurity")
		self.layer.removeAnimation(forKey: "UserPresent")
		self.layer.removeAnimation(forKey: "DissableSecurityWithBreach")
		self.layer.removeAnimation(forKey: "DissableSecurity")
		self.layer.removeAnimation(forKey: "DisableBreach")
	}
}
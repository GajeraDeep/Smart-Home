//
// FanView.swift
// Generated by Core Animator version 1.5.2 on 27/01/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _FanPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class FanView : UIView, CAAnimationDelegate, AnimationViewProtocol {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 75, height: 75))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:75, height:75)
		__scaling__.center = CGPoint(x:37.5, y:37.5)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let ventilation__root = _FanPassthroughView()
		let ventilation__xScale = _FanPassthroughView()
		let ventilation__yScale = _FanPassthroughView()
		let ventilation = UIImageView()
		let imgVentilation = UIImage(named:"ventilation.png", in: bundle, compatibleWith: nil)
		if imgVentilation == nil {
			print("** Warning: Could not create image from 'ventilation.png'")
		}
		ventilation.image = imgVentilation
		ventilation.contentMode = .center
		ventilation.bounds = CGRect(x:0, y:0, width:65.0, height:68.0)
		ventilation__root.layer.position = CGPoint(x:37.114, y:37.224)
		ventilation__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		ventilation__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.96)
		ventilation__root.transform = CGAffineTransform(rotationAngle: 0.000)
		ventilation__root.addSubview(ventilation__xScale)
		ventilation__xScale.addSubview(ventilation__yScale)
		ventilation__yScale.addSubview(ventilation)
		__scaling__.addSubview(ventilation__root)
		viewsByName["ventilation__root"] = ventilation__root
		viewsByName["ventilation__xScale"] = ventilation__xScale
		viewsByName["ventilation__yScale"] = ventilation__yScale
		viewsByName["ventilation"] = ventilation

		let wind__root = _FanPassthroughView()
		let wind__xScale = _FanPassthroughView()
		let wind__yScale = _FanPassthroughView()
		let wind = UIImageView()
		let imgWind = UIImage(named:"Wind.png", in: bundle, compatibleWith: nil)
		if imgWind == nil {
			print("** Warning: Could not create image from 'Wind.png'")
		}
		wind.image = imgWind
		wind.contentMode = .center
		wind.bounds = CGRect(x:0, y:0, width:71.0, height:73.0)
		wind__root.layer.position = CGPoint(x:37.114, y:37.224)
		wind__root.alpha = 0.00
		wind__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		wind__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.96)
		wind__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wind__root.addSubview(wind__xScale)
		wind__xScale.addSubview(wind__yScale)
		wind__yScale.addSubview(wind)
		__scaling__.addSubview(wind__root)
		viewsByName["Wind__root"] = wind__root
		viewsByName["Wind__xScale"] = wind__xScale
		viewsByName["Wind__yScale"] = wind__yScale
		viewsByName["Wind"] = wind

		self.viewsByName = viewsByName
	}

	// - MARK: hideWinds

	func turnOffAnimation() {
		addHideWindsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addHideWindsAnimation(completion: ((Bool) -> Void)?) {
		addHideWindsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addHideWindsAnimation(removedOnCompletion: Bool) {
		addHideWindsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addHideWindsAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addHideWindsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addHideWindsAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.210
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "HideWinds")
			self.animationCompletions[layer.animation(forKey: "HideWinds")!] = complete
		}

		let ventilationRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		ventilationRotationAnimation.duration = 0.210
		ventilationRotationAnimation.values = [3.142, 0.000] as [Float]
		ventilationRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		ventilationRotationAnimation.timingFunctions = [linearTiming]
		ventilationRotationAnimation.beginTime = beginTime
		ventilationRotationAnimation.fillMode = fillMode
		ventilationRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["ventilation__root"]?.layer.add(ventilationRotationAnimation, forKey:"hideWinds_Rotation")

		let windRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		windRotationAnimation.duration = 0.210
		windRotationAnimation.values = [3.142, 0.000] as [Float]
		windRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		windRotationAnimation.timingFunctions = [linearTiming]
		windRotationAnimation.beginTime = beginTime
		windRotationAnimation.fillMode = fillMode
		windRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wind__root"]?.layer.add(windRotationAnimation, forKey:"hideWinds_Rotation")

		let windOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		windOpacityAnimation.duration = 0.210
		windOpacityAnimation.values = [1.000, 0.000] as [Float]
		windOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		windOpacityAnimation.timingFunctions = [linearTiming]
		windOpacityAnimation.beginTime = beginTime
		windOpacityAnimation.fillMode = fillMode
		windOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wind__root"]?.layer.add(windOpacityAnimation, forKey:"hideWinds_Opacity")
	}

	func removeHideWindsAnimation() {
		self.layer.removeAnimation(forKey: "HideWinds")
		self.viewsByName["ventilation__root"]?.layer.removeAnimation(forKey: "hideWinds_Rotation")
		self.viewsByName["Wind__root"]?.layer.removeAnimation(forKey: "hideWinds_Rotation")
		self.viewsByName["Wind__root"]?.layer.removeAnimation(forKey: "hideWinds_Opacity")
	}

	// - MARK: ShowWinds

	func turnOnAnimation() {
		addShowWindsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addShowWindsAnimation(completion: ((Bool) -> Void)?) {
		addShowWindsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addShowWindsAnimation(removedOnCompletion: Bool) {
		addShowWindsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addShowWindsAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addShowWindsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addShowWindsAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.210
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "ShowWinds")
			self.animationCompletions[layer.animation(forKey: "ShowWinds")!] = complete
		}

		let ventilationRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		ventilationRotationAnimation.duration = 0.210
		ventilationRotationAnimation.values = [0.000, 3.142] as [Float]
		ventilationRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		ventilationRotationAnimation.timingFunctions = [linearTiming]
		ventilationRotationAnimation.beginTime = beginTime
		ventilationRotationAnimation.fillMode = fillMode
		ventilationRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["ventilation__root"]?.layer.add(ventilationRotationAnimation, forKey:"ShowWinds_Rotation")

		let windRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		windRotationAnimation.duration = 0.210
		windRotationAnimation.values = [0.000, 3.142] as [Float]
		windRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		windRotationAnimation.timingFunctions = [linearTiming]
		windRotationAnimation.beginTime = beginTime
		windRotationAnimation.fillMode = fillMode
		windRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wind__root"]?.layer.add(windRotationAnimation, forKey:"ShowWinds_Rotation")

		let windOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		windOpacityAnimation.duration = 0.210
		windOpacityAnimation.values = [0.000, 1.000] as [Float]
		windOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		windOpacityAnimation.timingFunctions = [linearTiming]
		windOpacityAnimation.beginTime = beginTime
		windOpacityAnimation.fillMode = fillMode
		windOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wind__root"]?.layer.add(windOpacityAnimation, forKey:"ShowWinds_Opacity")
	}

	func removeShowWindsAnimation() {
		self.layer.removeAnimation(forKey: "ShowWinds")
		self.viewsByName["ventilation__root"]?.layer.removeAnimation(forKey: "ShowWinds_Rotation")
		self.viewsByName["Wind__root"]?.layer.removeAnimation(forKey: "ShowWinds_Rotation")
		self.viewsByName["Wind__root"]?.layer.removeAnimation(forKey: "ShowWinds_Opacity")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "ShowWinds")
		self.layer.removeAnimation(forKey: "HideWinds")
	}
}
